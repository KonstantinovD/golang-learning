package main

import "fmt"

func d1() {
	for i := 3; i > 0; i-- {
		defer fmt.Print(i, " ")
	}
	fmt.Println()
}

func d2() {
	for i := 3; i > 0; i-- {
		defer func() {
			fmt.Print(i, " ")
		}()
		// defer применяется не к отдельному выражению fmt.Print(),
		// а к анонимной функции, которая имеет внутри себя замыкание
	}
	fmt.Println()
}

func d3() {
	for i := 3; i > 0; i-- {
		defer func(n int) {
			fmt.Print(n, " ")
		}(i)
		// defer применяется не к отдельному выражению fmt.Print(),
		// а к анонимной функции
	}
	fmt.Println()
}

func main() {
	d1() // 1 2 3

	d2() // 0 0 0
	// После того как завершился цикл for, значение i равно 0, поскольку
	// именно это значение i привело к завершению цикла for.
	// Но отложенная анонимная функция выполняется после завершения
	// цикла for. А поскольку у нее замыкание на i, то она трижды
	// выполняется со значением i, равным 0

	d3() // 1 2 3
	// Aнонимная функция имеет параметр
	// всякий раз, когда эта анонимная функция откладывается,
	// она получает и использует текущее значение i.
}
